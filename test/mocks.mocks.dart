// Mocks generated by Mockito 5.4.0 from annotations
// in krakencase/test/mocks.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i13;

import 'package:chopper/chopper.dart' as _i12;
import 'package:either_dart/either.dart' as _i2;
import 'package:flutter/foundation.dart' as _i18;
import 'package:flutter/services.dart' as _i20;
import 'package:flutter_bloc/flutter_bloc.dart' as _i16;
import 'package:krakencase/layers/application_layer/handlers/exception_handler.dart'
    as _i17;
import 'package:krakencase/layers/application_layer/handlers/method_channel_handler.dart'
    as _i19;
import 'package:krakencase/layers/data_layer/models/anime_model.dart' as _i9;
import 'package:krakencase/layers/data_layer/models/character_model.dart'
    as _i10;
import 'package:krakencase/layers/data_layer/services/remote/anime/anime_api_service.dart'
    as _i11;
import 'package:krakencase/layers/data_layer/services/remote/anime/anime_remote_service.dart'
    as _i21;
import 'package:krakencase/layers/data_layer/services/remote/anime/base/anime_remote_service_base.dart'
    as _i3;
import 'package:krakencase/layers/domain_layer/entities/anime_entity.dart'
    as _i14;
import 'package:krakencase/layers/domain_layer/repositories/anime/anime_repository.dart'
    as _i15;
import 'package:krakencase/layers/domain_layer/repositories/anime/base/anime_repository_base.dart'
    as _i8;
import 'package:krakencase/layers/domain_layer/usecases/get_anime_detail_usecase.dart'
    as _i4;
import 'package:krakencase/layers/domain_layer/usecases/get_top_anime_usecase.dart'
    as _i6;
import 'package:krakencase/layers/presentation_layer/pages/anime_detail/bloc/anime_detail_bloc.dart'
    as _i5;
import 'package:krakencase/layers/presentation_layer/pages/anime_list/bloc/anime_list_bloc.dart'
    as _i7;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeEither_0<L, R> extends _i1.SmartFake implements _i2.Either<L, R> {
  _FakeEither_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeAnimeRemoteServiceBase_1 extends _i1.SmartFake
    implements _i3.AnimeRemoteServiceBase {
  _FakeAnimeRemoteServiceBase_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeGetAnimeDetailUseCase_2 extends _i1.SmartFake
    implements _i4.GetAnimeDetailUseCase {
  _FakeGetAnimeDetailUseCase_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeAnimeDetailState_3 extends _i1.SmartFake
    implements _i5.AnimeDetailState {
  _FakeAnimeDetailState_3(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeGetTopAnimeUseCase_4 extends _i1.SmartFake
    implements _i6.GetTopAnimeUseCase {
  _FakeGetTopAnimeUseCase_4(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeAnimeListState_5 extends _i1.SmartFake
    implements _i7.AnimeListState {
  _FakeAnimeListState_5(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeAnimeRepositoryBase_6 extends _i1.SmartFake
    implements _i8.AnimeRepositoryBase {
  _FakeAnimeRepositoryBase_6(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeTopAnimeModel_7 extends _i1.SmartFake implements _i9.TopAnimeModel {
  _FakeTopAnimeModel_7(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeAnimeModel_8 extends _i1.SmartFake implements _i9.AnimeModel {
  _FakeAnimeModel_8(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeCharacterModel_9 extends _i1.SmartFake
    implements _i10.CharacterModel {
  _FakeCharacterModel_9(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeAnimeApiService_10 extends _i1.SmartFake
    implements _i11.AnimeApiService {
  _FakeAnimeApiService_10(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeChopperClient_11 extends _i1.SmartFake
    implements _i12.ChopperClient {
  _FakeChopperClient_11(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeType_12 extends _i1.SmartFake implements Type {
  _FakeType_12(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeResponse_13<BodyType> extends _i1.SmartFake
    implements _i12.Response<BodyType> {
  _FakeResponse_13(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [AnimeRepositoryBase].
///
/// See the documentation for Mockito's code generation for more information.
class MockAnimeRepositoryBase extends _i1.Mock
    implements _i8.AnimeRepositoryBase {
  @override
  _i13.Future<_i2.Either<Exception, List<_i14.AnimeEntity>>> getTopAnime(
    int? page, {
    String? type,
    String? filter,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getTopAnime,
          [page],
          {
            #type: type,
            #filter: filter,
          },
        ),
        returnValue:
            _i13.Future<_i2.Either<Exception, List<_i14.AnimeEntity>>>.value(
                _FakeEither_0<Exception, List<_i14.AnimeEntity>>(
          this,
          Invocation.method(
            #getTopAnime,
            [page],
            {
              #type: type,
              #filter: filter,
            },
          ),
        )),
        returnValueForMissingStub:
            _i13.Future<_i2.Either<Exception, List<_i14.AnimeEntity>>>.value(
                _FakeEither_0<Exception, List<_i14.AnimeEntity>>(
          this,
          Invocation.method(
            #getTopAnime,
            [page],
            {
              #type: type,
              #filter: filter,
            },
          ),
        )),
      ) as _i13.Future<_i2.Either<Exception, List<_i14.AnimeEntity>>>);

  @override
  _i13.Future<_i2.Either<Exception, _i14.AnimeEntity>> getAnimeDetail(
          int? id) =>
      (super.noSuchMethod(
        Invocation.method(
          #getAnimeDetail,
          [id],
        ),
        returnValue: _i13.Future<_i2.Either<Exception, _i14.AnimeEntity>>.value(
            _FakeEither_0<Exception, _i14.AnimeEntity>(
          this,
          Invocation.method(
            #getAnimeDetail,
            [id],
          ),
        )),
        returnValueForMissingStub:
            _i13.Future<_i2.Either<Exception, _i14.AnimeEntity>>.value(
                _FakeEither_0<Exception, _i14.AnimeEntity>(
          this,
          Invocation.method(
            #getAnimeDetail,
            [id],
          ),
        )),
      ) as _i13.Future<_i2.Either<Exception, _i14.AnimeEntity>>);
}

/// A class which mocks [AnimeRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockAnimeRepository extends _i1.Mock implements _i15.AnimeRepository {
  @override
  _i3.AnimeRemoteServiceBase get remoteService => (super.noSuchMethod(
        Invocation.getter(#remoteService),
        returnValue: _FakeAnimeRemoteServiceBase_1(
          this,
          Invocation.getter(#remoteService),
        ),
        returnValueForMissingStub: _FakeAnimeRemoteServiceBase_1(
          this,
          Invocation.getter(#remoteService),
        ),
      ) as _i3.AnimeRemoteServiceBase);

  @override
  _i13.Future<_i2.Either<Exception, List<_i14.AnimeEntity>>> getTopAnime(
    int? page, {
    String? type,
    String? filter,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getTopAnime,
          [page],
          {
            #type: type,
            #filter: filter,
          },
        ),
        returnValue:
            _i13.Future<_i2.Either<Exception, List<_i14.AnimeEntity>>>.value(
                _FakeEither_0<Exception, List<_i14.AnimeEntity>>(
          this,
          Invocation.method(
            #getTopAnime,
            [page],
            {
              #type: type,
              #filter: filter,
            },
          ),
        )),
        returnValueForMissingStub:
            _i13.Future<_i2.Either<Exception, List<_i14.AnimeEntity>>>.value(
                _FakeEither_0<Exception, List<_i14.AnimeEntity>>(
          this,
          Invocation.method(
            #getTopAnime,
            [page],
            {
              #type: type,
              #filter: filter,
            },
          ),
        )),
      ) as _i13.Future<_i2.Either<Exception, List<_i14.AnimeEntity>>>);

  @override
  _i13.Future<_i2.Either<Exception, _i14.AnimeEntity>> getAnimeDetail(
          int? id) =>
      (super.noSuchMethod(
        Invocation.method(
          #getAnimeDetail,
          [id],
        ),
        returnValue: _i13.Future<_i2.Either<Exception, _i14.AnimeEntity>>.value(
            _FakeEither_0<Exception, _i14.AnimeEntity>(
          this,
          Invocation.method(
            #getAnimeDetail,
            [id],
          ),
        )),
        returnValueForMissingStub:
            _i13.Future<_i2.Either<Exception, _i14.AnimeEntity>>.value(
                _FakeEither_0<Exception, _i14.AnimeEntity>(
          this,
          Invocation.method(
            #getAnimeDetail,
            [id],
          ),
        )),
      ) as _i13.Future<_i2.Either<Exception, _i14.AnimeEntity>>);
}

/// A class which mocks [AnimeDetailBloc].
///
/// See the documentation for Mockito's code generation for more information.
class MockAnimeDetailBloc extends _i1.Mock implements _i5.AnimeDetailBloc {
  @override
  _i4.GetAnimeDetailUseCase get getAnimeDetailUseCase => (super.noSuchMethod(
        Invocation.getter(#getAnimeDetailUseCase),
        returnValue: _FakeGetAnimeDetailUseCase_2(
          this,
          Invocation.getter(#getAnimeDetailUseCase),
        ),
        returnValueForMissingStub: _FakeGetAnimeDetailUseCase_2(
          this,
          Invocation.getter(#getAnimeDetailUseCase),
        ),
      ) as _i4.GetAnimeDetailUseCase);

  @override
  _i5.AnimeDetailState get state => (super.noSuchMethod(
        Invocation.getter(#state),
        returnValue: _FakeAnimeDetailState_3(
          this,
          Invocation.getter(#state),
        ),
        returnValueForMissingStub: _FakeAnimeDetailState_3(
          this,
          Invocation.getter(#state),
        ),
      ) as _i5.AnimeDetailState);

  @override
  _i13.Stream<_i5.AnimeDetailState> get stream => (super.noSuchMethod(
        Invocation.getter(#stream),
        returnValue: _i13.Stream<_i5.AnimeDetailState>.empty(),
        returnValueForMissingStub: _i13.Stream<_i5.AnimeDetailState>.empty(),
      ) as _i13.Stream<_i5.AnimeDetailState>);

  @override
  bool get isClosed => (super.noSuchMethod(
        Invocation.getter(#isClosed),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  void add(_i5.AnimeDetailEvent? event) => super.noSuchMethod(
        Invocation.method(
          #add,
          [event],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onEvent(_i5.AnimeDetailEvent? event) => super.noSuchMethod(
        Invocation.method(
          #onEvent,
          [event],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void emit(_i5.AnimeDetailState? state) => super.noSuchMethod(
        Invocation.method(
          #emit,
          [state],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void on<E extends _i5.AnimeDetailEvent>(
    _i16.EventHandler<E, _i5.AnimeDetailState>? handler, {
    _i16.EventTransformer<E>? transformer,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #on,
          [handler],
          {#transformer: transformer},
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onTransition(
          _i16.Transition<_i5.AnimeDetailEvent, _i5.AnimeDetailState>?
              transition) =>
      super.noSuchMethod(
        Invocation.method(
          #onTransition,
          [transition],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i13.Future<void> close() => (super.noSuchMethod(
        Invocation.method(
          #close,
          [],
        ),
        returnValue: _i13.Future<void>.value(),
        returnValueForMissingStub: _i13.Future<void>.value(),
      ) as _i13.Future<void>);

  @override
  void onChange(_i16.Change<_i5.AnimeDetailState>? change) =>
      super.noSuchMethod(
        Invocation.method(
          #onChange,
          [change],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void addError(
    Object? error, [
    StackTrace? stackTrace,
  ]) =>
      super.noSuchMethod(
        Invocation.method(
          #addError,
          [
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onError(
    Object? error,
    StackTrace? stackTrace,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #onError,
          [
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [AnimeListBloc].
///
/// See the documentation for Mockito's code generation for more information.
class MockAnimeListBloc extends _i1.Mock implements _i7.AnimeListBloc {
  @override
  _i6.GetTopAnimeUseCase get getTopAnimeUseCase => (super.noSuchMethod(
        Invocation.getter(#getTopAnimeUseCase),
        returnValue: _FakeGetTopAnimeUseCase_4(
          this,
          Invocation.getter(#getTopAnimeUseCase),
        ),
        returnValueForMissingStub: _FakeGetTopAnimeUseCase_4(
          this,
          Invocation.getter(#getTopAnimeUseCase),
        ),
      ) as _i6.GetTopAnimeUseCase);

  @override
  Map<String, String> get typeOptions => (super.noSuchMethod(
        Invocation.getter(#typeOptions),
        returnValue: <String, String>{},
        returnValueForMissingStub: <String, String>{},
      ) as Map<String, String>);

  @override
  Map<String, String> get filterOptions => (super.noSuchMethod(
        Invocation.getter(#filterOptions),
        returnValue: <String, String>{},
        returnValueForMissingStub: <String, String>{},
      ) as Map<String, String>);

  @override
  _i7.AnimeListState get state => (super.noSuchMethod(
        Invocation.getter(#state),
        returnValue: _FakeAnimeListState_5(
          this,
          Invocation.getter(#state),
        ),
        returnValueForMissingStub: _FakeAnimeListState_5(
          this,
          Invocation.getter(#state),
        ),
      ) as _i7.AnimeListState);

  @override
  _i13.Stream<_i7.AnimeListState> get stream => (super.noSuchMethod(
        Invocation.getter(#stream),
        returnValue: _i13.Stream<_i7.AnimeListState>.empty(),
        returnValueForMissingStub: _i13.Stream<_i7.AnimeListState>.empty(),
      ) as _i13.Stream<_i7.AnimeListState>);

  @override
  bool get isClosed => (super.noSuchMethod(
        Invocation.getter(#isClosed),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  void add(_i7.AnimeListEvent? event) => super.noSuchMethod(
        Invocation.method(
          #add,
          [event],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onEvent(_i7.AnimeListEvent? event) => super.noSuchMethod(
        Invocation.method(
          #onEvent,
          [event],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void emit(_i7.AnimeListState? state) => super.noSuchMethod(
        Invocation.method(
          #emit,
          [state],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void on<E extends _i7.AnimeListEvent>(
    _i16.EventHandler<E, _i7.AnimeListState>? handler, {
    _i16.EventTransformer<E>? transformer,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #on,
          [handler],
          {#transformer: transformer},
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onTransition(
          _i16.Transition<_i7.AnimeListEvent, _i7.AnimeListState>?
              transition) =>
      super.noSuchMethod(
        Invocation.method(
          #onTransition,
          [transition],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i13.Future<void> close() => (super.noSuchMethod(
        Invocation.method(
          #close,
          [],
        ),
        returnValue: _i13.Future<void>.value(),
        returnValueForMissingStub: _i13.Future<void>.value(),
      ) as _i13.Future<void>);

  @override
  void onChange(_i16.Change<_i7.AnimeListState>? change) => super.noSuchMethod(
        Invocation.method(
          #onChange,
          [change],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void addError(
    Object? error, [
    StackTrace? stackTrace,
  ]) =>
      super.noSuchMethod(
        Invocation.method(
          #addError,
          [
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onError(
    Object? error,
    StackTrace? stackTrace,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #onError,
          [
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [GetTopAnimeUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetTopAnimeUseCase extends _i1.Mock
    implements _i6.GetTopAnimeUseCase {
  @override
  _i8.AnimeRepositoryBase get repository => (super.noSuchMethod(
        Invocation.getter(#repository),
        returnValue: _FakeAnimeRepositoryBase_6(
          this,
          Invocation.getter(#repository),
        ),
        returnValueForMissingStub: _FakeAnimeRepositoryBase_6(
          this,
          Invocation.getter(#repository),
        ),
      ) as _i8.AnimeRepositoryBase);

  @override
  _i13.Future<_i2.Either<Exception, List<_i14.AnimeEntity>>> call(
    int? page, {
    String? type,
    String? filter,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [page],
          {
            #type: type,
            #filter: filter,
          },
        ),
        returnValue:
            _i13.Future<_i2.Either<Exception, List<_i14.AnimeEntity>>>.value(
                _FakeEither_0<Exception, List<_i14.AnimeEntity>>(
          this,
          Invocation.method(
            #call,
            [page],
            {
              #type: type,
              #filter: filter,
            },
          ),
        )),
        returnValueForMissingStub:
            _i13.Future<_i2.Either<Exception, List<_i14.AnimeEntity>>>.value(
                _FakeEither_0<Exception, List<_i14.AnimeEntity>>(
          this,
          Invocation.method(
            #call,
            [page],
            {
              #type: type,
              #filter: filter,
            },
          ),
        )),
      ) as _i13.Future<_i2.Either<Exception, List<_i14.AnimeEntity>>>);
}

/// A class which mocks [GetAnimeDetailUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetAnimeDetailUseCase extends _i1.Mock
    implements _i4.GetAnimeDetailUseCase {
  @override
  _i8.AnimeRepositoryBase get repository => (super.noSuchMethod(
        Invocation.getter(#repository),
        returnValue: _FakeAnimeRepositoryBase_6(
          this,
          Invocation.getter(#repository),
        ),
        returnValueForMissingStub: _FakeAnimeRepositoryBase_6(
          this,
          Invocation.getter(#repository),
        ),
      ) as _i8.AnimeRepositoryBase);

  @override
  _i13.Future<_i2.Either<Exception, _i14.AnimeEntity>> call(int? id) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [id],
        ),
        returnValue: _i13.Future<_i2.Either<Exception, _i14.AnimeEntity>>.value(
            _FakeEither_0<Exception, _i14.AnimeEntity>(
          this,
          Invocation.method(
            #call,
            [id],
          ),
        )),
        returnValueForMissingStub:
            _i13.Future<_i2.Either<Exception, _i14.AnimeEntity>>.value(
                _FakeEither_0<Exception, _i14.AnimeEntity>(
          this,
          Invocation.method(
            #call,
            [id],
          ),
        )),
      ) as _i13.Future<_i2.Either<Exception, _i14.AnimeEntity>>);
}

/// A class which mocks [ExceptionHandler].
///
/// See the documentation for Mockito's code generation for more information.
class MockExceptionHandler extends _i1.Mock implements _i17.ExceptionHandler {
  @override
  void init() => super.noSuchMethod(
        Invocation.method(
          #init,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void recordError(
    Object? exception,
    StackTrace? stack, {
    String? reason,
    bool? fatal,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #recordError,
          [
            exception,
            stack,
          ],
          {
            #reason: reason,
            #fatal: fatal,
          },
        ),
        returnValueForMissingStub: null,
      );

  @override
  void recordFatalError(_i18.FlutterErrorDetails? errorDetails) =>
      super.noSuchMethod(
        Invocation.method(
          #recordFatalError,
          [errorDetails],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [MethodChannelHandler].
///
/// See the documentation for Mockito's code generation for more information.
class MockMethodChannelHandler extends _i1.Mock
    implements _i19.MethodChannelHandler {
  @override
  _i13.Future<void> invokeMethod(
    String? method, [
    dynamic arguments,
  ]) =>
      (super.noSuchMethod(
        Invocation.method(
          #invokeMethod,
          [
            method,
            arguments,
          ],
        ),
        returnValue: _i13.Future<void>.value(),
        returnValueForMissingStub: _i13.Future<void>.value(),
      ) as _i13.Future<void>);

  @override
  void setMethodCallHandler(
          _i13.Future<dynamic> Function(_i20.MethodCall)? handler) =>
      super.noSuchMethod(
        Invocation.method(
          #setMethodCallHandler,
          [handler],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [AnimeRemoteServiceBase].
///
/// See the documentation for Mockito's code generation for more information.
class MockAnimeRemoteServiceBase extends _i1.Mock
    implements _i3.AnimeRemoteServiceBase {
  @override
  _i13.Future<_i9.TopAnimeModel> getTopAnime(
    int? page, {
    String? type,
    String? filter,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getTopAnime,
          [page],
          {
            #type: type,
            #filter: filter,
          },
        ),
        returnValue: _i13.Future<_i9.TopAnimeModel>.value(_FakeTopAnimeModel_7(
          this,
          Invocation.method(
            #getTopAnime,
            [page],
            {
              #type: type,
              #filter: filter,
            },
          ),
        )),
        returnValueForMissingStub:
            _i13.Future<_i9.TopAnimeModel>.value(_FakeTopAnimeModel_7(
          this,
          Invocation.method(
            #getTopAnime,
            [page],
            {
              #type: type,
              #filter: filter,
            },
          ),
        )),
      ) as _i13.Future<_i9.TopAnimeModel>);

  @override
  _i13.Future<_i9.AnimeModel> getAnimeDetail(int? id) => (super.noSuchMethod(
        Invocation.method(
          #getAnimeDetail,
          [id],
        ),
        returnValue: _i13.Future<_i9.AnimeModel>.value(_FakeAnimeModel_8(
          this,
          Invocation.method(
            #getAnimeDetail,
            [id],
          ),
        )),
        returnValueForMissingStub:
            _i13.Future<_i9.AnimeModel>.value(_FakeAnimeModel_8(
          this,
          Invocation.method(
            #getAnimeDetail,
            [id],
          ),
        )),
      ) as _i13.Future<_i9.AnimeModel>);

  @override
  _i13.Future<_i10.CharacterModel> getAnimeCharacters(int? id) =>
      (super.noSuchMethod(
        Invocation.method(
          #getAnimeCharacters,
          [id],
        ),
        returnValue:
            _i13.Future<_i10.CharacterModel>.value(_FakeCharacterModel_9(
          this,
          Invocation.method(
            #getAnimeCharacters,
            [id],
          ),
        )),
        returnValueForMissingStub:
            _i13.Future<_i10.CharacterModel>.value(_FakeCharacterModel_9(
          this,
          Invocation.method(
            #getAnimeCharacters,
            [id],
          ),
        )),
      ) as _i13.Future<_i10.CharacterModel>);
}

/// A class which mocks [AnimeRemoteService].
///
/// See the documentation for Mockito's code generation for more information.
class MockAnimeRemoteService extends _i1.Mock
    implements _i21.AnimeRemoteService {
  @override
  _i11.AnimeApiService get apiService => (super.noSuchMethod(
        Invocation.getter(#apiService),
        returnValue: _FakeAnimeApiService_10(
          this,
          Invocation.getter(#apiService),
        ),
        returnValueForMissingStub: _FakeAnimeApiService_10(
          this,
          Invocation.getter(#apiService),
        ),
      ) as _i11.AnimeApiService);

  @override
  _i13.Future<_i9.TopAnimeModel> getTopAnime(
    int? page, {
    String? type,
    String? filter,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getTopAnime,
          [page],
          {
            #type: type,
            #filter: filter,
          },
        ),
        returnValue: _i13.Future<_i9.TopAnimeModel>.value(_FakeTopAnimeModel_7(
          this,
          Invocation.method(
            #getTopAnime,
            [page],
            {
              #type: type,
              #filter: filter,
            },
          ),
        )),
        returnValueForMissingStub:
            _i13.Future<_i9.TopAnimeModel>.value(_FakeTopAnimeModel_7(
          this,
          Invocation.method(
            #getTopAnime,
            [page],
            {
              #type: type,
              #filter: filter,
            },
          ),
        )),
      ) as _i13.Future<_i9.TopAnimeModel>);

  @override
  _i13.Future<_i9.AnimeModel> getAnimeDetail(int? id) => (super.noSuchMethod(
        Invocation.method(
          #getAnimeDetail,
          [id],
        ),
        returnValue: _i13.Future<_i9.AnimeModel>.value(_FakeAnimeModel_8(
          this,
          Invocation.method(
            #getAnimeDetail,
            [id],
          ),
        )),
        returnValueForMissingStub:
            _i13.Future<_i9.AnimeModel>.value(_FakeAnimeModel_8(
          this,
          Invocation.method(
            #getAnimeDetail,
            [id],
          ),
        )),
      ) as _i13.Future<_i9.AnimeModel>);

  @override
  _i13.Future<_i10.CharacterModel> getAnimeCharacters(int? id) =>
      (super.noSuchMethod(
        Invocation.method(
          #getAnimeCharacters,
          [id],
        ),
        returnValue:
            _i13.Future<_i10.CharacterModel>.value(_FakeCharacterModel_9(
          this,
          Invocation.method(
            #getAnimeCharacters,
            [id],
          ),
        )),
        returnValueForMissingStub:
            _i13.Future<_i10.CharacterModel>.value(_FakeCharacterModel_9(
          this,
          Invocation.method(
            #getAnimeCharacters,
            [id],
          ),
        )),
      ) as _i13.Future<_i10.CharacterModel>);
}

/// A class which mocks [AnimeApiService].
///
/// See the documentation for Mockito's code generation for more information.
class MockAnimeApiService extends _i1.Mock implements _i11.AnimeApiService {
  @override
  _i12.ChopperClient get client => (super.noSuchMethod(
        Invocation.getter(#client),
        returnValue: _FakeChopperClient_11(
          this,
          Invocation.getter(#client),
        ),
        returnValueForMissingStub: _FakeChopperClient_11(
          this,
          Invocation.getter(#client),
        ),
      ) as _i12.ChopperClient);

  @override
  set client(_i12.ChopperClient? _client) => super.noSuchMethod(
        Invocation.setter(
          #client,
          _client,
        ),
        returnValueForMissingStub: null,
      );

  @override
  Type get definitionType => (super.noSuchMethod(
        Invocation.getter(#definitionType),
        returnValue: _FakeType_12(
          this,
          Invocation.getter(#definitionType),
        ),
        returnValueForMissingStub: _FakeType_12(
          this,
          Invocation.getter(#definitionType),
        ),
      ) as Type);

  @override
  _i13.Future<_i12.Response<Map<String, dynamic>>> getTopAnime(
    int? page, {
    String? type,
    String? filter,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getTopAnime,
          [page],
          {
            #type: type,
            #filter: filter,
          },
        ),
        returnValue: _i13.Future<_i12.Response<Map<String, dynamic>>>.value(
            _FakeResponse_13<Map<String, dynamic>>(
          this,
          Invocation.method(
            #getTopAnime,
            [page],
            {
              #type: type,
              #filter: filter,
            },
          ),
        )),
        returnValueForMissingStub:
            _i13.Future<_i12.Response<Map<String, dynamic>>>.value(
                _FakeResponse_13<Map<String, dynamic>>(
          this,
          Invocation.method(
            #getTopAnime,
            [page],
            {
              #type: type,
              #filter: filter,
            },
          ),
        )),
      ) as _i13.Future<_i12.Response<Map<String, dynamic>>>);

  @override
  _i13.Future<_i12.Response<Map<String, dynamic>>> getAnimeDetail(int? id) =>
      (super.noSuchMethod(
        Invocation.method(
          #getAnimeDetail,
          [id],
        ),
        returnValue: _i13.Future<_i12.Response<Map<String, dynamic>>>.value(
            _FakeResponse_13<Map<String, dynamic>>(
          this,
          Invocation.method(
            #getAnimeDetail,
            [id],
          ),
        )),
        returnValueForMissingStub:
            _i13.Future<_i12.Response<Map<String, dynamic>>>.value(
                _FakeResponse_13<Map<String, dynamic>>(
          this,
          Invocation.method(
            #getAnimeDetail,
            [id],
          ),
        )),
      ) as _i13.Future<_i12.Response<Map<String, dynamic>>>);

  @override
  _i13.Future<_i12.Response<Map<String, dynamic>>> getAnimeCharacters(
          int? id) =>
      (super.noSuchMethod(
        Invocation.method(
          #getAnimeCharacters,
          [id],
        ),
        returnValue: _i13.Future<_i12.Response<Map<String, dynamic>>>.value(
            _FakeResponse_13<Map<String, dynamic>>(
          this,
          Invocation.method(
            #getAnimeCharacters,
            [id],
          ),
        )),
        returnValueForMissingStub:
            _i13.Future<_i12.Response<Map<String, dynamic>>>.value(
                _FakeResponse_13<Map<String, dynamic>>(
          this,
          Invocation.method(
            #getAnimeCharacters,
            [id],
          ),
        )),
      ) as _i13.Future<_i12.Response<Map<String, dynamic>>>);
}
